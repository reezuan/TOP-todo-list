(()=>{"use strict";const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let s;const e=new Uint8Array(16);function o(){if(!s&&(s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!s))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(e)}const i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));const n=function(s,e,n){if(t.randomUUID&&!e&&!s)return t.randomUUID();const r=(s=s||{}).random||(s.rng||o)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=r[t];return e}return function(t,s=0){return i[t[s+0]]+i[t[s+1]]+i[t[s+2]]+i[t[s+3]]+"-"+i[t[s+4]]+i[t[s+5]]+"-"+i[t[s+6]]+i[t[s+7]]+"-"+i[t[s+8]]+i[t[s+9]]+"-"+i[t[s+10]]+i[t[s+11]]+i[t[s+12]]+i[t[s+13]]+i[t[s+14]]+i[t[s+15]]}(r)},r={addItemToList(t){this.toDoItems.push(t)}},c={removeItemFromList(t){let s=this.toDoItems.findIndex((s=>s.id==t.id));-1!=s&&this.toDoItems.splice(s,1)}};class a{constructor(t){this.id=n(),this.title=t,this.toDoItems=[]}get title(){return this._title}set title(t){this._title=t}}Object.assign(a.prototype,r),Object.assign(a.prototype,c);class d extends a{constructor(t){super(t)}}Object.assign(d.prototype,r),Object.assign(d.prototype,c);const p={associateList(t){this.associatedLists.push(t)}};class u{constructor(t,s,e,o){this.id=n(),this.title=t,this.description=s,this.dueDate=new Date(e),this.priority=o,this.associatedLists=[]}}Object.assign(u.prototype,(function(t){})),Object.assign(u.prototype,p),function(){const t=new a("All tasks"),s=new d("This is a test list"),e=new d("This is the 2nd test list"),o=new u("Test item 1","This is a test item 1",new Date,"HIGH SIAL");s.addItemToList(o),o.associateList(s),e.addItemToList(o),o.associateList(e),console.log(t),console.log(s),console.log(e),console.log(o)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WSxFQUFhQyxFQUFTQyxHQUNyQ3hCLEtBQUtNLEdBQUssSUFDVk4sS0FBS1UsTUFBUUEsRUFDYlYsS0FBS3NCLFlBQWNBLEVBQ25CdEIsS0FBS3VCLFFBQVUsSUFBSUUsS0FBS0YsR0FDeEJ2QixLQUFLd0IsU0FBV0EsRUFDaEJ4QixLQUFLb0IsZ0JBQWtCLEVBQzNCLEVBR0pQLE9BQU9DLE9BQU9PLEVBQVNOLFdDZnZCLFNBQXdCaEIsR0FFeEIsSURjQWMsT0FBT0MsT0FBT08sRUFBU04sVUFBV0csR0VabEMsV0FDSSxNQUFNUSxFQUFpQixJQUFJbEIsRUFBZSxhQUVwQ21CLEVBQVcsSUFBSVgsRUFBUyx1QkFDeEJZLEVBQVksSUFBSVosRUFBUyw2QkFFekJhLEVBQVksSUFBSVIsRUFBUyxjQUFlLHdCQUF5QixJQUFJSSxLQUFRLGFBRW5GRSxFQUFTN0IsY0FBYytCLEdBQ3ZCQSxFQUFVWCxjQUFjUyxHQUV4QkMsRUFBVTlCLGNBQWMrQixHQUN4QkEsRUFBVVgsY0FBY1UsR0FFeEJFLFFBQVFDLElBQUlMLEdBQ1pJLFFBQVFDLElBQUlKLEdBQ1pHLFFBQVFDLElBQUlILEdBQ1pFLFFBQVFDLElBQUlGLEVBQ2hCLENDcEJBRyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3RvcC10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly90b3AtdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL3NyYy9hZGRJdGVtVG9MaXN0LmpzIiwid2VicGFjazovL3RvcC10b2RvLWxpc3QvLi9zcmMvcmVtb3ZlSXRlbUZyb21MaXN0LmpzIiwid2VicGFjazovL3RvcC10b2RvLWxpc3QvLi9zcmMvR2xvYmFsVG9Eb0xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL3NyYy9Ub0RvTGlzdC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kby1saXN0Ly4vc3JjL2Fzc29jaWF0ZUxpc3QuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL3NyYy9Ub0RvSXRlbS5qcyIsIndlYnBhY2s6Ly90b3AtdG9kby1saXN0Ly4vc3JjL2RlbGV0ZVRvRG9JdGVtLmpzIiwid2VicGFjazovL3RvcC10b2RvLWxpc3QvLi9zcmMvaW5pdEhvbWUuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByYW5kb21VVUlEID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLnJhbmRvbVVVSUQgJiYgY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEXG59OyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICByZXR1cm4gYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiY29uc3QgYWRkSXRlbVRvTGlzdCA9IHtcbiAgICBhZGRJdGVtVG9MaXN0KHRvRG9JdGVtKSB7XG4gICAgICAgIHRoaXMudG9Eb0l0ZW1zLnB1c2godG9Eb0l0ZW0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGFkZEl0ZW1Ub0xpc3QgfTsiLCJjb25zdCByZW1vdmVJdGVtRnJvbUxpc3QgPSB7XG4gICAgcmVtb3ZlSXRlbUZyb21MaXN0KHRvRG9JdGVtKSB7XG4gICAgICAgIGxldCBpdGVtSW5kZXggPSB0aGlzLnRvRG9JdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09IHRvRG9JdGVtLmlkKTtcblxuICAgICAgICBpZiAoaXRlbUluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnRvRG9JdGVtcy5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHJlbW92ZUl0ZW1Gcm9tTGlzdCB9OyIsImltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgYWRkSXRlbVRvTGlzdCB9IGZyb20gJy4vYWRkSXRlbVRvTGlzdC5qcyc7XG5pbXBvcnQgeyByZW1vdmVJdGVtRnJvbUxpc3QgfSBmcm9tIFwiLi9yZW1vdmVJdGVtRnJvbUxpc3QuanNcIjtcblxuY2xhc3MgR2xvYmFsVG9Eb0xpc3Qge1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlKSB7XG4gICAgICAgIHRoaXMuaWQgPSB1dWlkdjQoKTtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLnRvRG9JdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIGdldCB0aXRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICAgIH1cblxuICAgIHNldCB0aXRsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90aXRsZSA9IHZhbHVlO1xuICAgIH1cbn1cblxuT2JqZWN0LmFzc2lnbihHbG9iYWxUb0RvTGlzdC5wcm90b3R5cGUsIGFkZEl0ZW1Ub0xpc3QpO1xuT2JqZWN0LmFzc2lnbihHbG9iYWxUb0RvTGlzdC5wcm90b3R5cGUsIHJlbW92ZUl0ZW1Gcm9tTGlzdCk7XG5cbmV4cG9ydCB7IEdsb2JhbFRvRG9MaXN0IH07IiwiaW1wb3J0IHsgR2xvYmFsVG9Eb0xpc3QgfSBmcm9tIFwiLi9HbG9iYWxUb0RvTGlzdC5qc1wiO1xuaW1wb3J0IHsgYWRkSXRlbVRvTGlzdCB9IGZyb20gXCIuL2FkZEl0ZW1Ub0xpc3QuanNcIjtcbmltcG9ydCB7IHJlbW92ZUl0ZW1Gcm9tTGlzdCB9IGZyb20gXCIuL3JlbW92ZUl0ZW1Gcm9tTGlzdC5qc1wiO1xuXG5jbGFzcyBUb0RvTGlzdCBleHRlbmRzIEdsb2JhbFRvRG9MaXN0IHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSkge1xuICAgICAgICBzdXBlcih0aXRsZSk7XG4gICAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihUb0RvTGlzdC5wcm90b3R5cGUsIGFkZEl0ZW1Ub0xpc3QpOyAvLyBOZWVkIHRvIGJ1aWxkIHRoaXMgZmVhdHVyZS5cbk9iamVjdC5hc3NpZ24oVG9Eb0xpc3QucHJvdG90eXBlLCByZW1vdmVJdGVtRnJvbUxpc3QpOyAvLyBOZWVkIHRvIGJ1aWxkIHRoaXMgZmVhdHVyZS5cblxuZXhwb3J0IHsgVG9Eb0xpc3QgfTsiLCJjb25zdCBhc3NvY2lhdGVMaXN0ID0ge1xuICAgIGFzc29jaWF0ZUxpc3QodG9Eb0xpc3QpIHtcbiAgICAgICAgdGhpcy5hc3NvY2lhdGVkTGlzdHMucHVzaCh0b0RvTGlzdCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgYXNzb2NpYXRlTGlzdCB9OyIsImltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgYXNzb2NpYXRlTGlzdCB9IGZyb20gXCIuL2Fzc29jaWF0ZUxpc3QuanNcIjtcbmltcG9ydCB7IGRlbGV0ZVRvRG9JdGVtIH0gZnJvbSBcIi4vZGVsZXRlVG9Eb0l0ZW0uanNcIjtcblxuY2xhc3MgVG9Eb0l0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5pZCA9IHV1aWR2NCgpO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gbmV3IERhdGUoZHVlRGF0ZSk7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy5hc3NvY2lhdGVkTGlzdHMgPSBbXTtcbiAgICB9XG59O1xuXG5PYmplY3QuYXNzaWduKFRvRG9JdGVtLnByb3RvdHlwZSwgZGVsZXRlVG9Eb0l0ZW0pO1xuT2JqZWN0LmFzc2lnbihUb0RvSXRlbS5wcm90b3R5cGUsIGFzc29jaWF0ZUxpc3QpO1xuXG5leHBvcnQgeyBUb0RvSXRlbSB9OyIsImZ1bmN0aW9uIGRlbGV0ZVRvRG9JdGVtKHRvRG9JdGVtKSB7XG5cbn07XG5cbmV4cG9ydCB7IGRlbGV0ZVRvRG9JdGVtIH07IiwiaW1wb3J0IHsgR2xvYmFsVG9Eb0xpc3QgfSBmcm9tIFwiLi9HbG9iYWxUb0RvTGlzdC5qc1wiO1xuaW1wb3J0IHsgVG9Eb0xpc3QgfSBmcm9tIFwiLi9Ub0RvTGlzdC5qc1wiO1xuaW1wb3J0IHsgVG9Eb0l0ZW0gfSBmcm9tIFwiLi9Ub0RvSXRlbS5qc1wiO1xuXG5mdW5jdGlvbiBpbml0SG9tZSgpIHtcbiAgICBjb25zdCBnbG9iYWxUb0RvTGlzdCA9IG5ldyBHbG9iYWxUb0RvTGlzdChcIkFsbCB0YXNrc1wiKTtcblxuICAgIGNvbnN0IHRlc3RMaXN0ID0gbmV3IFRvRG9MaXN0KFwiVGhpcyBpcyBhIHRlc3QgbGlzdFwiKTtcbiAgICBjb25zdCB0ZXN0TGlzdDIgPSBuZXcgVG9Eb0xpc3QoXCJUaGlzIGlzIHRoZSAybmQgdGVzdCBsaXN0XCIpO1xuXG4gICAgY29uc3QgdGVzdEl0ZW0xID0gbmV3IFRvRG9JdGVtKFwiVGVzdCBpdGVtIDFcIiwgXCJUaGlzIGlzIGEgdGVzdCBpdGVtIDFcIiwgbmV3IERhdGUoKSwgXCJISUdIIFNJQUxcIik7XG5cbiAgICB0ZXN0TGlzdC5hZGRJdGVtVG9MaXN0KHRlc3RJdGVtMSk7XG4gICAgdGVzdEl0ZW0xLmFzc29jaWF0ZUxpc3QodGVzdExpc3QpO1xuXG4gICAgdGVzdExpc3QyLmFkZEl0ZW1Ub0xpc3QodGVzdEl0ZW0xKTtcbiAgICB0ZXN0SXRlbTEuYXNzb2NpYXRlTGlzdCh0ZXN0TGlzdDIpO1xuXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVG9Eb0xpc3QpO1xuICAgIGNvbnNvbGUubG9nKHRlc3RMaXN0KTtcbiAgICBjb25zb2xlLmxvZyh0ZXN0TGlzdDIpO1xuICAgIGNvbnNvbGUubG9nKHRlc3RJdGVtMSk7XG59O1xuXG5leHBvcnQgeyBpbml0SG9tZSB9OyIsImltcG9ydCB7IGluaXRIb21lIH0gZnJvbSBcIi4vaW5pdEhvbWUuanNcIjtcblxuaW5pdEhvbWUoKTsiXSwibmFtZXMiOlsicmFuZG9tVVVJRCIsImNyeXB0byIsImJpbmQiLCJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJFcnJvciIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsIm9wdGlvbnMiLCJidWYiLCJvZmZzZXQiLCJybmRzIiwicmFuZG9tIiwiYXJyIiwidW5zYWZlU3RyaW5naWZ5IiwiYWRkSXRlbVRvTGlzdCIsInRvRG9JdGVtIiwidGhpcyIsInRvRG9JdGVtcyIsInJlbW92ZUl0ZW1Gcm9tTGlzdCIsIml0ZW1JbmRleCIsImZpbmRJbmRleCIsIml0ZW0iLCJpZCIsInNwbGljZSIsIkdsb2JhbFRvRG9MaXN0IiwiY29uc3RydWN0b3IiLCJ0aXRsZSIsIl90aXRsZSIsInZhbHVlIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvdG90eXBlIiwiVG9Eb0xpc3QiLCJzdXBlciIsImFzc29jaWF0ZUxpc3QiLCJ0b0RvTGlzdCIsImFzc29jaWF0ZWRMaXN0cyIsIlRvRG9JdGVtIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJEYXRlIiwiZ2xvYmFsVG9Eb0xpc3QiLCJ0ZXN0TGlzdCIsInRlc3RMaXN0MiIsInRlc3RJdGVtMSIsImNvbnNvbGUiLCJsb2ciLCJpbml0SG9tZSJdLCJzb3VyY2VSb290IjoiIn0=