(()=>{"use strict";const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let e;const o=new Uint8Array(16);function n(){if(!e&&(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(o)}const s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));const i=function(e,o,i){if(t.randomUUID&&!o&&!e)return t.randomUUID();const r=(e=e||{}).random||(e.rng||n)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,o){i=i||0;for(let t=0;t<16;++t)o[i+t]=r[t];return o}return function(t,e=0){return s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]}(r)},r={deleteToDoItem(t){t.forEach((t=>{let e=t.toDoItems.findIndex((t=>t.id==this.id));-1!=e&&t.toDoItems.splice(e,1)}))}};class d{constructor(t,e,o,n){this.id=i(),this.title=t,this.description=e,this.dueDate=new Date(o),this.priority=n}}Object.assign(d.prototype,r);const c={addToDoItem(t){this.toDoItems.push(t)}};class l{constructor(t){this.title=t,this.toDoItems=[]}get title(){return this._title}set title(t){this._title=t}}Object.assign(l.prototype,c);const a=[],u=new l("This is a test list"),p=new l("This is the 2nd test list");let m;a.push(u),a.push(p),console.log(a);const h=document.querySelector("body"),y=document.createElement("input"),D=document.createElement("button"),g=document.createElement("button");y.setAttribute("type","datetime-local"),h.appendChild(y),y.addEventListener("input",(()=>{console.log(y.value)})),D.addEventListener("click",(()=>{const t=new d("test item","this is a test item",y.value,"veli high");m=t,u.addToDoItem(t),p.addToDoItem(t),console.log(a)})),g.addEventListener("click",(()=>{m.deleteToDoItem(a),console.log(a)})),D.textContent="Make a to-do object!!!!",g.textContent="Delete the test item!!!",h.appendChild(D),h.appendChild(g)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,