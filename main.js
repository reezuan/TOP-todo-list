(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var o=t.g.document;if(!e&&o&&(o.currentScript&&(e=o.currentScript.src),!e)){var s=o.getElementsByTagName("script");if(s.length)for(var n=s.length-1;n>-1&&!e;)e=s[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let o;const s=new Uint8Array(16);function n(){if(!o&&(o="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!o))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(s)}const i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));const r=function(t,o,s){if(e.randomUUID&&!o&&!t)return e.randomUUID();const r=(t=t||{}).random||(t.rng||n)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,o){s=s||0;for(let t=0;t<16;++t)o[s+t]=r[t];return o}return function(t,e=0){return i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]}(r)},c={addItemToList(t){this.toDoItems.push(t)}},a={removeItemFromList(t){let e=this.toDoItems.findIndex((e=>e.id==t.id));-1!=e&&this.toDoItems.splice(e,1)}};class d{constructor(t){this.id=r(),this.title=t,this.toDoItems=[]}get title(){return this._title}set title(t){this._title=t}}Object.assign(d.prototype,c),Object.assign(d.prototype,a);class p extends d{constructor(t){super(t)}}Object.assign(p.prototype,c),Object.assign(p.prototype,a);const u={associateList(t){this.associatedLists.push(t)}};class l{constructor(t,e,o,s){this.id=r(),this.title=t,this.description=e,this.dueDate=new Date(o),this.priority=s,this.associatedLists=[]}}Object.assign(l.prototype,(function(t){})),Object.assign(l.prototype,u);const h=t.p+"934797fc4de4a141f21c.png",m=t.p+"f3ad49e2788ccd7a377d.png",g=t.p+"4c27d32139ea0789a49d.png";!function(){const t=document.querySelector("body");t.appendChild(function(){const t=document.createElement("header");return(new Image).src=h,(new Image).src=m,(new Image).src=g,t}()),t.appendChild(document.createElement("nav")),t.appendChild(document.createElement("section")),t.appendChild(document.createElement("footer"));const e=new d("All tasks"),o=new p("This is a test list"),s=new p("This is the 2nd test list"),n=new l("Test item 1","This is a test item 1",new Date,"HIGH SIAL");o.addItemToList(n),n.associateList(o),s.addItemToList(n),n.associateList(s),console.log(e),console.log(o),console.log(s),console.log(n)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,